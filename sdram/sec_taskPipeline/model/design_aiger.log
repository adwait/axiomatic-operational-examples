
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 a58571d0, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `design_aiger.ys' --

1. Executing RTLIL frontend.
Input filename: design_nomem.il

2. Executing FLATTEN pass (flatten design).
Deleting now unused module sdram_controller.
<suppressed ~1 debug messages>

3. Executing SETUNDEF pass (replace undef values with defined constants).

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FormalInduct.
<suppressed ~7 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FormalInduct'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FormalInduct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$procmux$330.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$procmux$330.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$procmux$339.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$procmux$339.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$procmux$345.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$procmux$345.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$procmux$351.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$procmux$351.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$procmux$354.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$procmux$354.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$procmux$357.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$procmux$357.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$ternary$sdram_controller.v:172$155.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$ternary$sdram_controller.v:172$155.
    dead port 1/2 on $mux $flatten\sdram_controlleri.$ternary$sdram_controller.v:173$158.
    dead port 2/2 on $mux $flatten\sdram_controlleri.$ternary$sdram_controller.v:173$158.
Removed 16 multiplexer ports.
<suppressed ~12 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FormalInduct.
    Consolidated identical input bits for $pmux cell $flatten\sdram_controlleri.$procmux$234:
      Old ports: A=3'000, B=6'111001, Y=$flatten\sdram_controlleri.$2\state_cnt_nxt[3:0]
      New ports: A=2'00, B=4'1101, Y=$flatten\sdram_controlleri.$2\state_cnt_nxt[3:0] [1:0]
      New connections: $flatten\sdram_controlleri.$2\state_cnt_nxt[3:0] [2] = $flatten\sdram_controlleri.$2\state_cnt_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell $flatten\sdram_controlleri.$procmux$268:
      Old ports: A=6'111000, B={ 3'011 $flatten\sdram_controlleri.$auto$rtlil.cc:2817:Anyseq$620 }, Y=$flatten\sdram_controlleri.$4\command_nxt[7:0]
      New ports: A=4'1000, B={ 1'0 $flatten\sdram_controlleri.$auto$rtlil.cc:2817:Anyseq$620 }, Y={ $flatten\sdram_controlleri.$4\command_nxt[7:0] [5] $flatten\sdram_controlleri.$4\command_nxt[7:0] [2:0] }
      New connections: $flatten\sdram_controlleri.$4\command_nxt[7:0] [4:3] = 2'11
    Consolidated identical input bits for $mux cell $flatten\sdram_controlleri.$procmux$280:
      Old ports: A=5'00000, B=5'11000, Y=$flatten\sdram_controlleri.$4\next[4:0]
      New ports: A=1'0, B=1'1, Y=$flatten\sdram_controlleri.$4\next[4:0] [3]
      New connections: { $flatten\sdram_controlleri.$4\next[4:0] [4] $flatten\sdram_controlleri.$4\next[4:0] [2:0] } = { $flatten\sdram_controlleri.$4\next[4:0] [3] 3'000 }
  Optimizing cells in module \FormalInduct.
    Consolidated identical input bits for $mux cell $flatten\sdram_controlleri.$procmux$292:
      Old ports: A=$flatten\sdram_controlleri.$4\command_nxt[7:0], B={ 3'011 $flatten\sdram_controlleri.$auto$rtlil.cc:2817:Anyseq$622 }, Y=$flatten\sdram_controlleri.$3\command_nxt[7:0]
      New ports: A={ $flatten\sdram_controlleri.$4\command_nxt[7:0] [5] $flatten\sdram_controlleri.$4\command_nxt[7:0] [2:0] }, B={ 1'0 $flatten\sdram_controlleri.$auto$rtlil.cc:2817:Anyseq$622 }, Y={ $flatten\sdram_controlleri.$3\command_nxt[7:0] [5] $flatten\sdram_controlleri.$3\command_nxt[7:0] [2:0] }
      New connections: $flatten\sdram_controlleri.$3\command_nxt[7:0] [4:3] = 2'11
    Consolidated identical input bits for $mux cell $flatten\sdram_controlleri.$procmux$301:
      Old ports: A=$flatten\sdram_controlleri.$4\next[4:0], B=5'10000, Y=$flatten\sdram_controlleri.$3\next[4:0]
      New ports: A={ $flatten\sdram_controlleri.$4\next[4:0] [3] $flatten\sdram_controlleri.$4\next[4:0] [3] }, B=2'10, Y=$flatten\sdram_controlleri.$3\next[4:0] [4:3]
      New connections: $flatten\sdram_controlleri.$3\next[4:0] [2:0] = 3'000
    Consolidated identical input bits for $mux cell $flatten\sdram_controlleri.$procmux$327:
      Old ports: A=$flatten\sdram_controlleri.$2\state_cnt_nxt[3:0], B=3'000, Y=\sdram_controlleri.state_cnt_nxt
      New ports: A=$flatten\sdram_controlleri.$2\state_cnt_nxt[3:0] [1:0], B=2'00, Y=\sdram_controlleri.state_cnt_nxt [1:0]
      New connections: \sdram_controlleri.state_cnt_nxt [2] = \sdram_controlleri.state_cnt_nxt [1]
  Optimizing cells in module \FormalInduct.
    Consolidated identical input bits for $mux cell $flatten\sdram_controlleri.$procmux$310:
      Old ports: A=$flatten\sdram_controlleri.$3\command_nxt[7:0], B=6'010001, Y=$flatten\sdram_controlleri.$2\command_nxt[7:0]
      New ports: A={ $flatten\sdram_controlleri.$3\command_nxt[7:0] [5] 1'1 $flatten\sdram_controlleri.$3\command_nxt[7:0] [2:0] }, B=5'00001, Y={ $flatten\sdram_controlleri.$2\command_nxt[7:0] [5] $flatten\sdram_controlleri.$2\command_nxt[7:0] [3:0] }
      New connections: $flatten\sdram_controlleri.$2\command_nxt[7:0] [4] = 1'1
    Consolidated identical input bits for $mux cell $flatten\sdram_controlleri.$procmux$316:
      Old ports: A=$flatten\sdram_controlleri.$3\next[4:0], B=5'00001, Y=$flatten\sdram_controlleri.$2\next[4:0]
      New ports: A={ $flatten\sdram_controlleri.$3\next[4:0] [4:3] 1'0 }, B=3'001, Y={ $flatten\sdram_controlleri.$2\next[4:0] [4:3] $flatten\sdram_controlleri.$2\next[4:0] [0] }
      New connections: $flatten\sdram_controlleri.$2\next[4:0] [2:1] = 2'00
  Optimizing cells in module \FormalInduct.
Performed a total of 8 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FormalInduct'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $flatten\sdram_controlleri.$auto$opt_dff.cc:764:run$700 ($sdffe) from module FormalInduct.
Setting constant 1-bit at position 1 on $flatten\sdram_controlleri.$auto$opt_dff.cc:764:run$700 ($sdffe) from module FormalInduct.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FormalInduct..
Removed 73 unused cells and 99 unused wires.
<suppressed ~103 debug messages>

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module FormalInduct.
<suppressed ~6 debug messages>

4.10. Rerunning OPT passes. (Maybe there is more to do..)

4.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FormalInduct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FormalInduct.
Performed a total of 0 changes.

4.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FormalInduct'.
Removed a total of 0 cells.

4.14. Executing OPT_SHARE pass.

4.15. Executing OPT_DFF pass (perform DFF optimizations).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FormalInduct..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module FormalInduct.

4.18. Rerunning OPT passes. (Maybe there is more to do..)

4.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FormalInduct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FormalInduct.
Performed a total of 0 changes.

4.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FormalInduct'.
Removed a total of 0 cells.

4.22. Executing OPT_SHARE pass.

4.23. Executing OPT_DFF pass (perform DFF optimizations).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FormalInduct..

4.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module FormalInduct.

4.26. Finished OPT passes. (There is nothing left to do.)

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=6:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=6:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=6:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$ee6aae96ac61c94691bfe8c461d15653a85f16ef\_90_pmux for cells of type $pmux.
Running "alumacc" on wrapper $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=10:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
No more expansions possible.
<suppressed ~1276 debug messages>

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FormalInduct.
<suppressed ~468 debug messages>

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FormalInduct'.
<suppressed ~396 debug messages>
Removed a total of 132 cells.

6.3. Executing OPT_DFF pass (perform DFF optimizations).

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FormalInduct..
Removed 150 unused cells and 446 unused wires.
<suppressed ~151 debug messages>

6.5. Finished fast OPT passes.

7. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\FormalInduct' to `<abc-temp-dir>/input.blif'..
Extracted 476 gates and 540 wires to a netlist network with 62 inputs and 49 outputs.

8.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      487
ABC RESULTS:               NOT cells:      346
ABC RESULTS:        internal signals:      429
ABC RESULTS:           input signals:       62
ABC RESULTS:          output signals:       49
Removing temp directory.

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FormalInduct..
Removed 0 unused cells and 360 unused wires.
<suppressed ~6 debug messages>

10. Printing statistics.

=== FormalInduct ===

   Number of wires:                883
   Number of wire bits:           1049
   Number of public wires:          38
   Number of public wire bits:     194
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                892
     $_AND_                        487
     $_DFF_P_                       50
     $_NOT_                        346
     $anyseq                         7
     $assert                         2

11. Executing AIGER backend.

End of script. Logfile hash: 64d0810a7c, CPU: user 0.73s system 0.01s, MEM: 19.50 MB peak
Yosys 0.9+4052 (git sha1 a58571d0, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 30% 1x abc (0 sec), 21% 1x techmap (0 sec), ...
