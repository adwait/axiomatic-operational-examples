
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 a58571d0, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `design_aiger.ys' --

1. Executing RTLIL frontend.
Input filename: design_nomem.il

2. Executing FLATTEN pass (flatten design).
Deleting now unused module vscale_src_b_mux.
Deleting now unused module vscale_src_a_mux.
Deleting now unused module vscale_regfile.
Deleting now unused module vscale_pipeline.
Deleting now unused module vscale_mul_div.
Deleting now unused module vscale_imm_gen.
Deleting now unused module vscale_hasti_bridge.
Deleting now unused module vscale_dp_hasti_sram.
Deleting now unused module vscale_ctrl.
Deleting now unused module vscale_csr_file.
Deleting now unused module vscale_core.
Deleting now unused module vscale_arbiter.
Deleting now unused module vscale_alu.
Deleting now unused module vscale_PC_mux.
<suppressed ~15 debug messages>

3. Executing SETUNDEF pass (replace undef values with defined constants).

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vscale_sim_top.
<suppressed ~681 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vscale_sim_top'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vscale_sim_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3269$5799.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3269$5799.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3270$5800.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3270$5800.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3271$5801.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3271$5801.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3272$5802.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3272$5802.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3273$5803.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3273$5803.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3274$5804.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3274$5804.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3275$5805.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3275$5805.
    dead port 1/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3276$5806.
    dead port 2/2 on $mux $flatten\arbiter.$ternary$mvscale_top_c1_nonmem-i.v:3276$5806.
Removed 16 multiplexer ports.
<suppressed ~2066 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vscale_sim_top.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vscale_sim_top'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\core_gen_block[0].vscale.\pipeline.$auto$opt_dff.cc:764:run$37604 ($dffe) from module vscale_sim_top (D = \core_gen_block[0].vscale.pipeline._0095_ [2], Q = \core_gen_block[0].vscale.pipeline.PC_IF [2], rval = 1'1).
Adding SRST signal on $flatten\core_gen_block[0].vscale.\pipeline.$auto$opt_dff.cc:764:run$37605 ($dffe) from module vscale_sim_top (D = \core_gen_block[0].vscale.pipeline._0095_ [3], Q = \core_gen_block[0].vscale.pipeline.PC_IF [3], rval = 1'0).
Adding SRST signal on $flatten\core_gen_block[0].vscale.\pipeline.$auto$opt_dff.cc:764:run$37606 ($dffe) from module vscale_sim_top (D = \core_gen_block[0].vscale.pipeline._0095_ [4], Q = \core_gen_block[0].vscale.pipeline.PC_IF [4], rval = 1'0).

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vscale_sim_top..
Removed 1391 unused cells and 225 unused wires.
<suppressed ~1449 debug messages>

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module vscale_sim_top.
<suppressed ~212 debug messages>

4.10. Rerunning OPT passes. (Maybe there is more to do..)

4.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vscale_sim_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2031 debug messages>

4.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vscale_sim_top.
Performed a total of 0 changes.

4.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vscale_sim_top'.
Removed a total of 0 cells.

4.14. Executing OPT_SHARE pass.

4.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $flatten\core_gen_block[0].vscale.\pipeline.\ctrl.$auto$opt_dff.cc:764:run$36239 ($sdffe) from module vscale_sim_top.

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vscale_sim_top..
Removed 1 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

4.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module vscale_sim_top.
<suppressed ~2 debug messages>

4.18. Rerunning OPT passes. (Maybe there is more to do..)

4.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vscale_sim_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2031 debug messages>

4.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vscale_sim_top.
Performed a total of 0 changes.

4.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vscale_sim_top'.
Removed a total of 0 cells.

4.22. Executing OPT_SHARE pass.

4.23. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active SRST on $flatten\core_gen_block[0].vscale.\pipeline.\ctrl.$auto$opt_dff.cc:702:run$36222 ($sdffce) from module vscale_sim_top.

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vscale_sim_top..

4.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module vscale_sim_top.

4.26. Rerunning OPT passes. (Maybe there is more to do..)

4.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vscale_sim_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2031 debug messages>

4.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vscale_sim_top.
Performed a total of 0 changes.

4.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vscale_sim_top'.
Removed a total of 0 cells.

4.30. Executing OPT_SHARE pass.

4.31. Executing OPT_DFF pass (perform DFF optimizations).

4.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vscale_sim_top..

4.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module vscale_sim_top.

4.34. Finished OPT passes. (There is nothing left to do.)

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=30:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=30:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=30:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=30:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=30:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=30:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$b3b6ac92d800c6f07aa48f510f923d86a674e5a7\_90_pmux for cells of type $pmux.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
Creating constmapped module `$paramod$constmap:cc1c2ffc7e230f33b4e0e4e0c6a15c05a39a8c4e$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr'.

5.14. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:cc1c2ffc7e230f33b4e0e4e0c6a15c05a39a8c4e$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~608 debug messages>

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:cc1c2ffc7e230f33b4e0e4e0c6a15c05a39a8c4e$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~16 debug messages>
Removed 0 unused cells and 8 unused wires.
Using template $paramod$constmap:cc1c2ffc7e230f33b4e0e4e0c6a15c05a39a8c4e$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $ff.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
No more expansions possible.
<suppressed ~19138 debug messages>

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vscale_sim_top.
<suppressed ~2186 debug messages>

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vscale_sim_top'.
<suppressed ~3129 debug messages>
Removed a total of 1043 cells.

6.3. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$39491 ($_SDFFCE_PN0P_) from module vscale_sim_top (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$39491 ($_SDFFCE_PN0P_) from module vscale_sim_top.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$39492 ($_SDFFCE_PN0P_) from module vscale_sim_top (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$39492 ($_SDFFCE_PN0P_) from module vscale_sim_top.

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vscale_sim_top..
Removed 202 unused cells and 826 unused wires.
<suppressed ~203 debug messages>

6.5. Rerunning OPT passes. (Removed registers in this run.)

6.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module vscale_sim_top.
<suppressed ~2 debug messages>

6.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vscale_sim_top'.
Removed a total of 0 cells.

6.8. Executing OPT_DFF pass (perform DFF optimizations).

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vscale_sim_top..

6.10. Finished fast OPT passes.

7. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\vscale_sim_top' to `<abc-temp-dir>/input.blif'..
Extracted 21649 gates and 26208 wires to a netlist network with 4557 inputs and 3357 outputs.

8.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:    43768
ABC RESULTS:               NOT cells:    39311
ABC RESULTS:        internal signals:    18294
ABC RESULTS:           input signals:     4557
ABC RESULTS:          output signals:     3357
Removing temp directory.

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vscale_sim_top..
Removed 28 unused cells and 11896 unused wires.
<suppressed ~2760 debug messages>

10. Printing statistics.

=== vscale_sim_top ===

   Number of wires:              84934
   Number of wire bits:          98587
   Number of public wires:         774
   Number of public wire bits:   14424
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              87454
     $_AND_                      43768
     $_DFF_P_                     3319
     $_FF_                          32
     $_NOT_                      39311
     $anyseq                      1006
     $assert                         9
     $assume                         9

11. Executing AIGER backend.

End of script. Logfile hash: bff4e3a4c6, CPU: user 41.49s system 0.28s, MEM: 232.38 MB peak
Yosys 0.9+4052 (git sha1 a58571d0, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 28% 9x opt_clean (12 sec), 24% 11x opt_expr (10 sec), ...
